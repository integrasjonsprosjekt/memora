definitions:
  models.CreateUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.PatchUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 12
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - id
    - name
    - password
    type: object
  status.Status:
    properties:
      uptime:
        description: Indicates the duration of the service uptime
        type: integer
      version:
        description: Version of the service
        type: string
    type: object
  users.ReturnID:
    properties:
      id:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/cards:
    post:
      consumes:
      - application/json
      description: Creates a new card in Firestore and returns its ID
      parameters:
      - description: Card info (can be MultipleChoiceCard, FrontBackCard, OrderedCard,
          or BlanksCard)
        in: body
        name: card
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ReturnID'
      summary: Create a card
      tags:
      - Cards
  /api/v1/cards/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a card from Firestore by its ID
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a card
      tags:
      - Cards
    get:
      consumes:
      - application/json
      description: Retrieves card information from Firestore by its ID
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AnyCard'
      summary: Get a card
      tags:
      - Cards
    patch:
      consumes:
      - application/json
      description: Updates card data in Firestore by ID
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AnyCard'
      summary: Update a card
      tags:
      - Cards
  /api/v1/status:
    get:
      description: Returns version and uptime
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/status.Status'
      summary: Status page for the API
      tags:
      - Health
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.ReturnID'
      summary: Create a user and returns their ID
      tags:
      - Users
  /api/v1/users/{id}:
    get:
      description: Returns user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: GET a user from firestore by their ID
      tags:
      - Users
swagger: "2.0"
