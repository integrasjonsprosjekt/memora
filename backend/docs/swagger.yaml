definitions:
  models.AnyCard:
    properties:
      blanksCard:
        $ref: '#/definitions/models.BlanksCard'
      frontBackCard:
        allOf:
        - $ref: '#/definitions/models.FrontBackCard'
        description: '@swagger:oneOf'
      multipleChoiceCard:
        $ref: '#/definitions/models.MultipleChoiceCard'
      orderedCard:
        $ref: '#/definitions/models.OrderedCard'
    type: object
  models.BlanksCard:
    properties:
      answers:
        items:
          type: string
        type: array
      id:
        type: string
      question:
        type: string
      type:
        type: string
    required:
    - answers
    - question
    - type
    type: object
  models.CreateDeck:
    properties:
      owner_id:
        type: string
      shared_emails:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - owner_id
    - title
    type: object
  models.CreateUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.DeckResponse:
    properties:
      cards:
        items: {}
        type: array
      id:
        type: string
      owner_id:
        type: string
      shared_emails:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  models.DisplayDeck:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  models.FrontBackCard:
    properties:
      back:
        type: string
      front:
        type: string
      id:
        type: string
      type:
        type: string
    required:
    - back
    - front
    - type
    type: object
  models.MultipleChoiceCard:
    properties:
      id:
        type: string
      options:
        additionalProperties:
          type: boolean
        type: object
      question:
        type: string
      type:
        type: string
    required:
    - options
    - question
    - type
    type: object
  models.OrderedCard:
    properties:
      id:
        type: string
      options:
        items:
          type: string
        type: array
      question:
        type: string
      type:
        type: string
    required:
    - options
    - question
    - type
    type: object
  models.PatchUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 12
        type: string
    type: object
  models.ReturnID:
    properties:
      id:
        type: string
    type: object
  models.UpdateDeck:
    properties:
      title:
        type: string
    type: object
  models.UpdateDeckCards:
    properties:
      cards:
        items:
          type: string
        type: array
      opp:
        enum:
        - add
        - remove
        type: string
    required:
    - cards
    - opp
    type: object
  models.UpdateDeckEmails:
    properties:
      opp:
        enum:
        - add
        - remove
        type: string
      shared_emails:
        items:
          type: string
        type: array
    required:
    - opp
    - shared_emails
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  status.Status:
    properties:
      uptime:
        description: Indicates the duration of the service uptime
        type: integer
      version:
        description: Version of the service
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/decks:
    post:
      consumes:
      - application/json
      description: Creates a new deck in Firestore and returns its ID
      parameters:
      - description: Deck info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateDeck'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ReturnID'
      summary: Create a deck
      tags:
      - Decks
  /api/v1/decks/{deckID}:
    delete:
      consumes:
      - application/json
      description: Deletes a deck from Firestore by its ID
      parameters:
      - description: Deck ID
        in: path
        name: deckID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a deck along with its cards
      tags:
      - Decks
    get:
      consumes:
      - application/json
      description: Retrieves card information from Firestore by its ID
      parameters:
      - description: Deck ID
        in: path
        name: deckID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeckResponse'
      summary: Get a deck
      tags:
      - Decks
    patch:
      consumes:
      - application/json
      description: Updates a decks data in Firestore by ID
      parameters:
      - description: Deck info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDeck'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeckResponse'
      summary: Update a deck
      tags:
      - Decks
  /api/v1/decks/{deckID}/cards:
    post:
      consumes:
      - application/json
      description: Creates a new card in a specified deck and returns the updated
        deck
      parameters:
      - description: Deck ID
        in: path
        name: deckID
        required: true
        type: string
      - description: Card info (can be MultipleChoiceCard, FrontBackCard, OrderedCard,
          or BlanksCard)
        in: body
        name: card
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DeckResponse'
      summary: Create a card in a deck
      tags:
      - Decks
  /api/v1/decks/{deckID}/cards/{cardID}:
    delete:
      consumes:
      - application/json
      description: Deletes a card from a specified deck by its ID
      parameters:
      - description: Deck ID
        in: path
        name: deckID
        required: true
        type: string
      - description: Card ID
        in: path
        name: cardID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a card in a deck
      tags:
      - Decks
    get:
      consumes:
      - application/json
      description: Retrieves card information from Firestore by its ID
      parameters:
      - description: Deck ID
        in: path
        name: deckID
        required: true
        type: string
      - description: Card ID
        in: path
        name: cardID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AnyCard'
      summary: Get a card
      tags:
      - Decks
    patch:
      consumes:
      - application/json
      description: Updates a decks cards in Firestore by ID
      parameters:
      - description: Deck info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDeckCards'
      - description: Deck ID
        in: path
        name: deckID
        required: true
        type: string
      - description: Card ID
        in: path
        name: cardID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeckResponse'
      summary: Update a decks' cards
      tags:
      - Decks
  /api/v1/decks/{deckID}/emails:
    patch:
      consumes:
      - application/json
      description: Updates a decks shared emails in Firestore by ID
      parameters:
      - description: Deck info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDeckEmails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeckResponse'
      summary: Update a decks' emails
      tags:
      - Decks
  /api/v1/status:
    get:
      description: Returns version and uptime
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/status.Status'
      summary: Status page for the API
      tags:
      - Health
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a user and return their ID
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Return card information
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Deletes a user from firestore by their ID
      tags:
      - Users
    get:
      description: Return user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: GET a user from firestore by their ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates/replaces data
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.PatchUser'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Patch the users' data by ID
      tags:
      - Users
  /api/v1/users/{id}/decks/owned:
    get:
      description: Return the user's owned decks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DisplayDeck'
            type: array
      summary: GET a users' owned decks from firestore by their ID
      tags:
      - Users
  /api/v1/users/{id}/decks/shared:
    get:
      description: Return the user's shared decks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DisplayDeck'
            type: array
      summary: GET a users' shared decks from firestore by their ID
      tags:
      - Users
swagger: "2.0"
